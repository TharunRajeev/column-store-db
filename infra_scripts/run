#!/usr/bin/env python3
import argparse
import subprocess
import sys
import time
import os
from pathlib import Path
import signal
from typing import Optional, Tuple

class TestRunner:
    def __init__(self):
        self.output_dir = "/cs165/infra_outputs"
        self.server_startup_time = 2
        self.milestone_ranges = {
            1: (1, 9),
            2: (1, 19),
            3: (1, 44),
            4: (1, 59),
            5: (1, 65)
        }
        # Tests that require server restart before execution
        self.server_restart_tests = {2, 5, 11, 21, 22, 31, 46, 62}
        
    def setup_parser(self) -> argparse.ArgumentParser:
        parser = argparse.ArgumentParser(
            description="CS165 Test Runner",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
Examples:
  Run all tests:
    %(prog)s -a
  Run specific milestone:
    %(prog)s -m 2
  Run specific test:
    %(prog)s -t 5
  Run all tests in milestone 3:
    %(prog)s -m 3 -a
            """
        )
        parser.add_argument('-m', '--milestone', type=int, choices=range(1, 6),
                          help='Milestone number (1-5)')
        parser.add_argument('-t', '--test', type=int,
                          help='Specific test number to run')
        parser.add_argument('-a', '--all', action='store_true',
                          help='Run all tests for specified milestone or all milestones if no milestone specified')
        return parser

    def kill_server(self):
        """Kill any running server processes."""
        try:
            subprocess.run(['pkill', '-9', 'server'], capture_output=True)
            time.sleep(1)  # Give time for process to fully terminate
        except subprocess.SubprocessError:
            pass

    def start_server(self):
        """Start the server and wait for it to be ready."""
        self.kill_server()
        try:
            subprocess.Popen(
                ['./server'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd='/cs165/src'
            )
            time.sleep(self.server_startup_time)
        except subprocess.SubprocessError as e:
            print(f"Failed to start server: {e}")
            sys.exit(1)

    def compare_outputs(self, test_id: int) -> Tuple[bool, str]:
        """
        Compare test output with expected output.
        Returns (success, diff_output).
        """
        output_file = f"{self.output_dir}/test{test_id:02d}gen.cleaned.out"
        expected_file = f"/cs165/staff_test/test{test_id:02d}gen.exp"
        
        # Clean the output file similar to the bash script
        with open(f"{self.output_dir}/test{test_id:02d}gen.out", 'r') as f:
            content = f.read()
        
        # Process content (remove ANSI codes, comments, normalize decimals)
        # TODO: Implement proper cleaning logic here
        
        try:
            diff_process = subprocess.run(
                ['diff', '-B', '-w', output_file, expected_file],
                capture_output=True,
                text=True
            )
            if diff_process.returncode == 0:
                return True, ""
            
            # If direct comparison fails, try sorted comparison
            sort_actual = subprocess.run(['sort', '-n', output_file],
                                      capture_output=True, text=True)
            sort_expected = subprocess.run(['sort', '-n', expected_file],
                                        capture_output=True, text=True)
            
            if sort_actual.stdout == sort_expected.stdout:
                return True, "(Passed with sorted comparison)"
            
            return False, diff_process.stdout
            
        except subprocess.SubprocessError as e:
            return False, f"Error comparing files: {e}"

    def run_single_test(self, test_id: int) -> bool:
        """Run a single test and return success status."""
        if test_id in self.server_restart_tests:
            self.start_server()

        print(f"\nRunning test {test_id:02d}...")
        
        try:
            # Run the client with the test
            client_process = subprocess.run(
                ['./client'],
                input=open(f'/cs165/staff_test/test{test_id:02d}gen.dsl').read(),
                text=True,
                cwd='/cs165/src',
                capture_output=True
            )
            
            if client_process.returncode == 88:
                print(f"Test {test_id:02d} failed - client error:")
                print(client_process.stderr)
                return False
            
            success, diff_output = self.compare_outputs(test_id)
            if success:
                print(f"Test {test_id:02d} passed [\033[42mok\033[0m]")
                return True
            else:
                print(f"Test {test_id:02d} failed [\033[31mfail\033[0m]")
                print("\nDifferences found:")
                print(diff_output)
                return False
                
        except Exception as e:
            print(f"Error running test {test_id:02d}: {e}")
            return False

    def run_milestone(self, milestone: int, run_all: bool = False) -> bool:
        """Run all tests for a specific milestone."""
        start, end = self.milestone_ranges[milestone]
        if not run_all:
            print(f"Running milestone {milestone} (tests {start}-{end})")
        
        success = True
        for test_id in range(start, end + 1):
            if not self.run_single_test(test_id):
                success = False
                if not run_all:
                    break
        return success

    def run_all_milestones(self) -> bool:
        """Run all tests from all milestones."""
        print("Running all milestones")
        success = True
        for milestone in range(1, 6):
            print(f"\n=== Milestone {milestone} ===")
            if not self.run_milestone(milestone, run_all=True):
                success = False
        return success

    def main(self):
        parser = self.setup_parser()
        args = parser.parse_args()

        if len(sys.argv) == 1:
            parser.print_help()
            sys.exit(1)

        try:
            if args.test:
                success = self.run_single_test(args.test)
            elif args.milestone:
                success = self.run_milestone(args.milestone, args.all)
            elif args.all:
                success = self.run_all_milestones()
            else:
                parser.print_help()
                sys.exit(1)

            sys.exit(0 if success else 1)

        finally:
            self.kill_server()

if __name__ == "__main__":
    runner = TestRunner()
    runner.main()
